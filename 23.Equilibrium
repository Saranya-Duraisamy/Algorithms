/*Question: Find an index in an array such that its prefix sum equals its suffix sum.
An array A consisting of N integers is given. An equilibrium index of this array is any integer P such that 0 ≤ P < N and 
the sum of elements of lower indices is equal to the sum of elements of higher indices, i.e. 
A[0] + A[1] + ... + A[P−1] = A[P+1] + ... + A[N−2] + A[N−1].
Sum of zero elements is assumed to be equal to 0. This can happen if P = 0 or if P = N−1.

For example, consider the following array A consisting of N = 8 elements:

  A[0] = -1
  A[1] =  3
  A[2] = -4
  A[3] =  5
  A[4] =  1
  A[5] = -6
  A[6] =  2
  A[7] =  1
P = 1 is an equilibrium index of this array, because:

A[0] = −1 = A[2] + A[3] + A[4] + A[5] + A[6] + A[7]

Write a function:
int solution(int A[], int N); that, given an array A consisting of N integers, returns any of its equilibrium indices. 
The function should return −1 if no equilibrium index exists.
*/

public class HelloWorld
{
  static int findEquilibrium(int[] arr){
    int len = arr.length;
    int left_sum = 0;
    int right_sum = 0;
    for(int i = 0; i<len; i++){
      right_sum += arr[i];
    }
    for(int i=0; i< len; i++){
      right_sum -= arr[i];
      if(left_sum == right_sum){
        return i;
      }
      left_sum += arr[i];
    }
    return -1;
  }
  public static void main(String[] args)
  {
    int[] arr = {-1,3,-4,5,1,-6,2,1};
    System.out.println(findEquilibrium(arr));
  }
}
